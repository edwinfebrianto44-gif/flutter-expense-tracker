name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/expense-tracker-backend
  DEPLOY_HOST: ${{ secrets.VPS_HOST }}
  DEPLOY_USER: ${{ secrets.VPS_USER }}

jobs:
  # Job 1: Lint and Test
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_expense_tracker
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      working-directory: ./backend
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      working-directory: ./backend
      run: |
        pip install mypy
        mypy app --ignore-missing-imports --check-untyped-defs

    - name: Security check with bandit
      working-directory: ./backend
      run: |
        pip install bandit
        bandit -r app -f json -o bandit-report.json || true

    - name: Run tests with pytest
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_expense_tracker
        JWT_SECRET_KEY: test-secret-key-for-ci-cd-pipeline-testing-only
        ENVIRONMENT: testing
      run: |
        export PYTHONPATH=$PWD
        pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          backend/htmlcov/
          backend/bandit-report.json

  # Job 2: Build and Push Docker Image
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.DOCKER_IMAGE }}:latest
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Job 3: Deploy to VPS
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.DEPLOY_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting deployment..."
        
        # Variables
        APP_DIR="/opt/expense-tracker"
        DOCKER_IMAGE="${{ env.DOCKER_IMAGE }}:latest"
        BACKUP_DIR="/opt/backups/$(date +%Y%m%d_%H%M%S)"
        
        # Create backup
        echo "üì¶ Creating backup..."
        sudo mkdir -p $BACKUP_DIR
        sudo docker exec expense-tracker-db pg_dump -U postgres expense_tracker > $BACKUP_DIR/database.sql || true
        
        # Pull latest image
        echo "üîÑ Pulling latest Docker image..."
        sudo docker pull $DOCKER_IMAGE
        
        # Update docker-compose.yml
        echo "üìù Updating docker-compose.yml..."
        cd $APP_DIR
        sudo git pull origin main
        
        # Stop services
        echo "‚èπÔ∏è Stopping services..."
        sudo docker-compose down
        
        # Start services with new image
        echo "‚ñ∂Ô∏è Starting services..."
        sudo docker-compose up -d
        
        # Health check
        echo "üè• Performing health check..."
        sleep 30
        for i in {1..5}; do
          if curl -f http://localhost:8000/health; then
            echo "‚úÖ Health check passed!"
            break
          fi
          echo "‚è≥ Waiting for service to be ready..."
          sleep 10
        done
        
        # Cleanup old images
        echo "üßπ Cleaning up old images..."
        sudo docker image prune -f
        
        echo "üéâ Deployment completed successfully!"
        EOF
        chmod +x deploy.sh

    - name: Deploy to VPS
      run: |
        scp -i ~/.ssh/id_rsa deploy.sh ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }}:/tmp/
        ssh -i ~/.ssh/id_rsa ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "bash /tmp/deploy.sh"

    - name: Run post-deployment tests
      run: |
        ssh -i ~/.ssh/id_rsa ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} << 'EOF'
        # Test API endpoints
        echo "üß™ Testing API endpoints..."
        
        # Health check
        curl -f http://localhost:8000/health || exit 1
        
        # API documentation
        curl -f http://localhost:8000/docs || exit 1
        
        # Test auth endpoint
        curl -f -X POST http://localhost:8000/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"username":"test","email":"test@example.com","password":"TempPass123!","full_name":"Test User"}' || true
        
        echo "‚úÖ Post-deployment tests completed!"
        EOF

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          # Add Slack/Discord notification here if needed
        else
          echo "‚ùå Deployment failed!"
          # Add failure notification here if needed
        fi

  # Job 4: Security Scan
  security:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
