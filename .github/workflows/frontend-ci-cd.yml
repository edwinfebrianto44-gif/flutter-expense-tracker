name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mobile-app/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'mobile-app/**'

env:
  FLUTTER_VERSION: '3.24.3'
  JAVA_VERSION: '17'

jobs:
  # Job 1: Test and Analyze
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Cache pub dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          mobile-app/.dart_tool
        key: ${{ runner.os }}-pub-${{ hashFiles('mobile-app/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: Get dependencies
      working-directory: ./mobile-app
      run: flutter pub get

    - name: Verify dependencies
      working-directory: ./mobile-app
      run: flutter pub deps

    - name: Analyze code
      working-directory: ./mobile-app
      run: flutter analyze --fatal-infos

    - name: Check formatting
      working-directory: ./mobile-app
      run: dart format --set-exit-if-changed .

    - name: Run tests
      working-directory: ./mobile-app
      run: flutter test --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./mobile-app/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: mobile-app/coverage/

  # Job 2: Build Android APK
  build-android:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      working-directory: ./mobile-app
      run: flutter pub get

    - name: Configure app signing (if release)
      if: github.ref == 'refs/heads/main'
      working-directory: ./mobile-app
      run: |
        # Create keystore from base64 secret
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks
        
        # Create key.properties
        cat > android/key.properties << EOF
        storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
        keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
        storeFile=keystore.jks
        EOF

    - name: Build APK (Debug)
      if: github.event_name == 'pull_request'
      working-directory: ./mobile-app
      run: flutter build apk --debug

    - name: Build APK (Release)
      if: github.ref == 'refs/heads/main'
      working-directory: ./mobile-app
      run: flutter build apk --release

    - name: Build App Bundle (Release)
      if: github.ref == 'refs/heads/main'
      working-directory: ./mobile-app
      run: flutter build appbundle --release

    - name: Sign APK (if release)
      if: github.ref == 'refs/heads/main'
      working-directory: ./mobile-app
      run: |
        # APK is already signed during build process when key.properties exists
        echo "APK signed successfully"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: |
          mobile-app/build/app/outputs/flutter-apk/*.apk
          mobile-app/build/app/outputs/bundle/release/*.aab
        retention-days: 30

    - name: Create release (if main branch)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## 🚀 Release v${{ github.run_number }}
          
          **Changes in this release:**
          - Latest features and bug fixes
          - Performance improvements
          - UI/UX enhancements
          
          **Download:**
          - Android APK: See attached files
          - Web version: Available at [your-app-url]
          
          **Installation:**
          1. Download the APK file
          2. Enable "Install from Unknown Sources" in Android settings
          3. Install the APK
          
          Generated from commit: ${{ github.sha }}
        files: |
          mobile-app/build/app/outputs/flutter-apk/*.apk
          mobile-app/build/app/outputs/bundle/release/*.aab
        draft: false
        prerelease: false

  # Job 3: Build and Deploy Web
  build-web:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      working-directory: ./mobile-app
      run: flutter pub get

    - name: Build for web
      working-directory: ./mobile-app
      run: |
        flutter build web --release --web-renderer html
        
        # Add custom headers for PWA
        cat > build/web/_headers << EOF
        /*
          X-Frame-Options: DENY
          X-Content-Type-Options: nosniff
          X-XSS-Protection: 1; mode=block
          Referrer-Policy: strict-origin-when-cross-origin
        
        /*.js
          Cache-Control: public, max-age=31536000, immutable
        
        /*.css
          Cache-Control: public, max-age=31536000, immutable
        
        /assets/*
          Cache-Control: public, max-age=31536000, immutable
        EOF

    - name: Upload web build artifact
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: mobile-app/build/web/
        retention-days: 7

    # Deploy to Netlify
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './mobile-app/build/web'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - ${{ github.sha }}"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    # Alternative: Deploy to Surge
    - name: Deploy to Surge (Alternative)
      if: false  # Set to true if you prefer Surge over Netlify
      run: |
        npm install -g surge
        surge ./mobile-app/build/web ${{ secrets.SURGE_DOMAIN }} --token ${{ secrets.SURGE_TOKEN }}

  # Job 4: Build iOS (macOS runner required)
  build-ios:
    needs: test
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      working-directory: ./mobile-app
      run: flutter pub get

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'

    - name: Build iOS (No signing)
      working-directory: ./mobile-app
      run: |
        flutter build ios --release --no-codesign

    - name: Upload iOS build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: mobile-app/build/ios/iphoneos/
        retention-days: 7

  # Job 5: Performance Tests
  performance:
    needs: [build-android, build-web]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      working-directory: ./mobile-app
      run: flutter pub get

    - name: Run integration tests
      working-directory: ./mobile-app
      run: |
        if [ -d "integration_test" ]; then
          flutter test integration_test/
        else
          echo "No integration tests found"
        fi

    - name: Download web build
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: web-build/

    - name: Setup Node.js for Lighthouse
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Lighthouse
      run: npm install -g @lhci/cli lighthouse

    - name: Run Lighthouse CI
      run: |
        # Start a simple HTTP server
        cd web-build
        python3 -m http.server 8080 &
        SERVER_PID=$!
        sleep 5
        
        # Run Lighthouse
        lighthouse http://localhost:8080 \
          --output json \
          --output html \
          --output-path ./lighthouse-report \
          --chrome-flags="--headless --no-sandbox"
        
        # Stop server
        kill $SERVER_PID

    - name: Upload Lighthouse report
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-report
        path: web-build/lighthouse-report*

  # Job 6: Notification
  notify:
    needs: [build-android, build-web, build-ios]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.build-android.result }}" == "success" ] && 
           [ "${{ needs.build-web.result }}" == "success" ]; then
          echo "✅ Frontend deployment successful!"
          # Add your notification logic here (Slack, Discord, Email, etc.)
        else
          echo "❌ Frontend deployment failed!"
          # Add failure notification logic here
        fi
