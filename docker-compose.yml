version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: expense_tracker_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-expense_tracker}
      POSTGRES_USER: ${POSTGRES_USER:-expense_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-expense_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/schema_and_seed.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - expense_tracker_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-expense_user} -d ${POSTGRES_DB:-expense_tracker}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: expense_tracker_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - expense_tracker_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: expense_tracker_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-expense_user}:${POSTGRES_PASSWORD:-expense_password}@postgres:5432/${POSTGRES_DB:-expense_tracker}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-super-secure-secret-key-change-in-production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      ENVIRONMENT: production
      DEBUG: false
      CORS_ORIGINS: http://localhost:3000,http://localhost:8080
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 10485760
    ports:
      - "8000:8000"
    volumes:
      - backend_uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - expense_tracker_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Flutter Web App
  frontend:
    build:
      context: ./mobile-app
      dockerfile: Dockerfile.web
    container_name: expense_tracker_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      API_BASE_URL: http://localhost:8000
    networks:
      - expense_tracker_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: expense_tracker_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/logs:/var/log/nginx
      - backend_uploads:/var/www/uploads
    depends_on:
      - backend
      - frontend
    networks:
      - expense_tracker_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  expense_tracker_network:
    driver: bridge
